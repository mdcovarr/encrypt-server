import random

class DH():  # Diffie-Hellman set-up
    q = 1386756547874583668788179437471415784692880776961541010180661134996472424450339906011639573150675261425045001202466651972951468349610770869703515546687802255391466489105943891304691374642108950144704412847285389135357748500736402386686079849743732218628438054320639657406787899644017678041436319515132391108176579609546291735685383793707573954791449898546378803464346404018787603343882256110273600310394529736007534609741124129074317412624674798640021242176589478116741611863785570155919153474899899694826829792682978230008982433764243103666783263941014764201962205771341144963304371920239066479693176350217352624239178010810311623091478878093234594120551963932058330174820335692511383242376925570680666235268339736717812487975699339111735970484022059213463208273712008735097489863895525129333571331033842523201278200397639209529195631619816800020775833733582759770904352565047306979346215453888987113869240075964223993394760889784394304114238180037660020673656712892609445501905050114672685458361281639891495271091168954637421694632158009951419683497017482622237733366817323425960492271950818088816771502691780955323585907908926335657031194081299421459302556673369299181802953455918604957266525006439691

    safe_p = 2773513095749167337576358874942831569385761553923082020361322269992944848900679812023279146301350522850090002404933303945902936699221541739407031093375604510782932978211887782609382749284217900289408825694570778270715497001472804773372159699487464437256876108641279314813575799288035356082872639030264782216353159219092583471370767587415147909582899797092757606928692808037575206687764512220547200620789059472015069219482248258148634825249349597280042484353178956233483223727571140311838306949799799389653659585365956460017964867528486207333566527882029528403924411542682289926608743840478132959386352700434705248478356021620623246182957756186469188241103927864116660349640671385022766484753851141361332470536679473435624975951398678223471940968044118426926416547424017470194979727791050258667142662067685046402556400795278419058391263239633600041551667467165519541808705130094613958692430907777974227738480151928447986789521779568788608228476360075320041347313425785218891003810100229345370916722563279782990542182337909274843389264316019902839366994034965244475466733634646851920984543901636177633543005383561910647171815817852671314062388162598842918605113346738598363605906911837209914533050012879383

    g = 967717815276424335658597955626422458994419174497969907337157673886123656638205469226076197861249549004480841387043360197071017811130707990685744514558595068941725067952556006237862391064159647193542530329259333442485175693941842684712007646242422926508000403302669078971670934589486761637846920089591711726342061843805812789899990816663915282671085039813609522242829719587993249808317734238106660385861768230295679126590839097244478220392871782842745758326756009749518752261780971503339957101241429278086064519161884670803755256928075030040725829571759962567416958199028585508053574180142683126826804771118716296486230523760774389715749479154235237931126825997489514734133523549901600330751339003899015821961418539362798639669975431713371350926815830845181534326423028370436056697857918994988629688023563560002153140124962200937852164145182161084793162729526892933590160284681369008253980150977651701597571404654558482636180694648894782471449354358221269399650775453765824765529395288811662441509565199205733657279155210616750060391443188845224391244598246511947071570694256382613964010021678095711923378088547657654209783183271262387278417872172708262072964856821330955727615106330602713152230040271215

    def __init__(self, length=512):
        #self.p = self.generate_prime(length)
        #self.alpha = random.randrange(2, self.p-2)
        self.p = self.safe_p
        self.alpha = self.g
        self.k_pr = random.randrange(2, self.p - 2)

    def is_prime(self, n):
        """
        Miller-Rabin primality test.

        A return value of False means n is certainly not prime. A return value of
        True means n is very likely a prime.
        """
        if n != int(n):
            return False
        n = int(n)
        # Miller-Rabin test for prime
        if n == 0 or n == 1 or n == 4 or n == 6 or n == 8 or n == 9:
            return False

        if n == 2 or n == 3 or n == 5 or n == 7:
            return True
        s = 0
        d = n - 1
        while d % 2 == 0:
            d >>= 1
            s += 1
        assert (2 ** s * d == n - 1)

        def trial_composite(a):
            if pow(a, d, n) == 1:
                return False
            for i in range(s):
                if pow(a, 2 ** i * d, n) == n - 1:
                    return False
            return True

        for i in range(5):  # number of trials
            a = random.randrange(2, n)
            if trial_composite(a):
                return False
        return True

    def generate_prime(self, length): # length of prime in bits
        p = 4
        while not self.is_prime(p):
            p = random.getrandbits(length)
            # apply a mask to set MSB and LSB to 1
            p |= (1 << length - 1) | 1
        return p

    def pub_key(self):
        return pow(self.alpha, self.k_pr, self.p)

    def produce_key(self, B):
        return pow(B, self.k_pr, self.p)


def test():
    #dh = DH()  # Diffie-Hellman set up
    #print(dh.safe_p == dh.q * 2 + 1)
    #print(dh.is_prime(dh.safe_p), dh.is_prime(dh.q))
    #print(pow(dh.g, 2, dh.p) != 1, pow(dh.g, dh.q, dh.p) != 1)

    Alice = DH()
    A = Alice.pub_key()
    Bob = DH()
    B = Bob.pub_key()
    print(Alice.produce_key(B) == Bob.produce_key(A))


if __name__ == '__main__':
    test()
